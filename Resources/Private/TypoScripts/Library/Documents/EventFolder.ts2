

# TypoScript is object oriented.
# ... based on prototypes (like a "class")
# ... like "lib.*" in TYPO3 CMS

# like "class Event extends Template"
prototype(DevDays.NeosWorkshop:EventFolder) < prototype(TYPO3.TypoScript:Template) {
	templatePath = 'resource://DevDays.NeosWorkshop/Private/Templates/NodeTypes/EventFolder.html'

	events = ${q(node).children('[instanceof DevDays.NeosWorkshop:Event]')}

	eventRenderer = TYPO3.TypoScript:Case {

		default {
			@position = 'end 9999'
			condition = TRUE

			renderer = TYPO3.TypoScript:Template {
				templatePath = 'resource://DevDays.NeosWorkshop/Private/Templates/NodeTypes/EventFolder.html'
				sectionName = 'singleEvent'

				title = ${q(node).property('title')}
				eventDate = ${q(node).property('eventDate')}

				node = ${node}
			}
		}
	}

}


# "PrimaryContent" is a "Case" TypoScript object.
# like a big "Switch / Case / If" Statement.
# ... is a "Decider" waht to render
prototype(TYPO3.Neos:PrimaryContent).coffeeEventFolder {

	# IF "we're on a coffee event document"
	condition = ${q(node).is('[instanceof DevDays.NeosWorkshop:EventFolder]')}

	# THEN "we want to render ..."
	type = 'DevDays.NeosWorkshop:EventFolder'
}